-- TSE_MAC_v16.vhd

-- This file was auto-generated from altera_eth_tse_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 16.1 196

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TSE_MAC_v16 is
	port (
		clk              : in  std_logic                     := '0';             -- control_port_clock_connection.clk
		reset            : in  std_logic                     := '0';             --              reset_connection.reset
		reg_data_out     : out std_logic_vector(31 downto 0);                    --                  control_port.readdata
		reg_rd           : in  std_logic                     := '0';             --                              .read
		reg_data_in      : in  std_logic_vector(31 downto 0) := (others => '0'); --                              .writedata
		reg_wr           : in  std_logic                     := '0';             --                              .write
		reg_busy         : out std_logic;                                        --                              .waitrequest
		reg_addr         : in  std_logic_vector(7 downto 0)  := (others => '0'); --                              .address
		ff_rx_clk        : in  std_logic                     := '0';             --      receive_clock_connection.clk
		ff_tx_clk        : in  std_logic                     := '0';             --     transmit_clock_connection.clk
		ff_rx_data       : out std_logic_vector(7 downto 0);                     --                       receive.data
		ff_rx_eop        : out std_logic;                                        --                              .endofpacket
		rx_err           : out std_logic_vector(5 downto 0);                     --                              .error
		ff_rx_rdy        : in  std_logic                     := '0';             --                              .ready
		ff_rx_sop        : out std_logic;                                        --                              .startofpacket
		ff_rx_dval       : out std_logic;                                        --                              .valid
		ff_tx_data       : in  std_logic_vector(7 downto 0)  := (others => '0'); --                      transmit.data
		ff_tx_eop        : in  std_logic                     := '0';             --                              .endofpacket
		ff_tx_err        : in  std_logic                     := '0';             --                              .error
		ff_tx_rdy        : out std_logic;                                        --                              .ready
		ff_tx_sop        : in  std_logic                     := '0';             --                              .startofpacket
		ff_tx_wren       : in  std_logic                     := '0';             --                              .valid
		xon_gen          : in  std_logic                     := '0';             --           mac_misc_connection.xon_gen
		xoff_gen         : in  std_logic                     := '0';             --                              .xoff_gen
		magic_wakeup     : out std_logic;                                        --                              .magic_wakeup
		magic_sleep_n    : in  std_logic                     := '0';             --                              .magic_sleep_n
		ff_tx_crc_fwd    : in  std_logic                     := '0';             --                              .ff_tx_crc_fwd
		ff_tx_septy      : out std_logic;                                        --                              .ff_tx_septy
		tx_ff_uflow      : out std_logic;                                        --                              .tx_ff_uflow
		ff_tx_a_full     : out std_logic;                                        --                              .ff_tx_a_full
		ff_tx_a_empty    : out std_logic;                                        --                              .ff_tx_a_empty
		rx_err_stat      : out std_logic_vector(17 downto 0);                    --                              .rx_err_stat
		rx_frm_type      : out std_logic_vector(3 downto 0);                     --                              .rx_frm_type
		ff_rx_dsav       : out std_logic;                                        --                              .ff_rx_dsav
		ff_rx_a_full     : out std_logic;                                        --                              .ff_rx_a_full
		ff_rx_a_empty    : out std_logic;                                        --                              .ff_rx_a_empty
		ref_clk          : in  std_logic                     := '0';             --  pcs_ref_clk_clock_connection.clk
		gxb_cal_blk_clk  : in  std_logic                     := '0';             --                   cal_blk_clk.clk
		led_crs          : out std_logic;                                        --         status_led_connection.crs
		led_link         : out std_logic;                                        --                              .link
		led_panel_link   : out std_logic;                                        --                              .panel_link
		led_col          : out std_logic;                                        --                              .col
		led_an           : out std_logic;                                        --                              .an
		led_char_err     : out std_logic;                                        --                              .char_err
		led_disp_err     : out std_logic;                                        --                              .disp_err
		rx_recovclkout   : out std_logic;                                        --     serdes_control_connection.rx_recovclkout
		reconfig_clk     : in  std_logic                     := '0';             --                              .reconfig_clk
		reconfig_togxb   : in  std_logic_vector(3 downto 0)  := (others => '0'); --                              .reconfig_togxb
		reconfig_fromgxb : out std_logic_vector(4 downto 0);                     --                              .reconfig_fromgxb
		reconfig_busy    : in  std_logic                     := '0';             --                              .reconfig_busy
		txp              : out std_logic;                                        --             serial_connection.txp
		rxp              : in  std_logic                     := '0'              --                              .rxp
	);
end entity TSE_MAC_v16;

architecture rtl of TSE_MAC_v16 is
	component altera_eth_tse_mac is
		generic (
			ING_ADDR                 : integer := 0;
			ENABLE_MAC_RX_VLAN       : boolean := false;
			ENABLE_SUP_ADDR          : boolean := false;
			DEVICE_FAMILY            : string  := "ARRIAGX";
			INSERT_TA                : boolean := true;
			ING_FIFO                 : integer := 0;
			ENABLE_ECC               : boolean := false;
			CRC32DWIDTH              : integer := 0;
			ENABLE_ENA               : integer := 32;
			SYNCHRONIZER_DEPTH       : integer := 3;
			ENABLE_MAC_TX_VLAN       : boolean := false;
			RESET_LEVEL              : integer := 0;
			STAT_CNT_ENA             : boolean := false;
			CUST_VERSION             : integer := 0;
			CRC32S1L2_EXTERN         : boolean := false;
			MBIT_ONLY                : boolean := true;
			EG_ADDR                  : integer := 0;
			CORE_VERSION             : integer := 0;
			CRC32GENDELAY            : integer := 0;
			EG_FIFO                  : integer := 0;
			REDUCED_INTERFACE_ENA    : boolean := false;
			ENABLE_MAGIC_DETECT      : boolean := false;
			ENABLE_MDIO              : boolean := false;
			ENABLE_MAC_TXADDR_SET    : boolean := false;
			RAM_TYPE                 : string  := "AUTO";
			CRC32CHECK16BIT          : integer := 0;
			ENABLE_LGTH_CHECK        : boolean := true;
			ENABLE_MAC_FLOW_CTRL     : boolean := false;
			ENABLE_SHIFT16           : boolean := false;
			USE_SYNC_RESET           : boolean := false;
			REDUCED_CONTROL          : boolean := true;
			MDIO_CLK_DIV             : integer := 0;
			ENABLE_PADDING           : boolean := true;
			ENABLE_GMII_LOOPBACK     : boolean := false;
			GBIT_ONLY                : boolean := true;
			ENA_HASH                 : boolean := false;
			ENABLE_EXTENDED_STAT_REG : boolean := false;
			ENABLE_HD_LOGIC          : boolean := false
		);
		port (
			clk             : in  std_logic                     := 'X';             -- clk
			reset           : in  std_logic                     := 'X';             -- reset
			reg_addr        : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			reg_data_out    : out std_logic_vector(31 downto 0);                    -- readdata
			reg_rd          : in  std_logic                     := 'X';             -- read
			reg_data_in     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			reg_wr          : in  std_logic                     := 'X';             -- write
			reg_busy        : out std_logic;                                        -- waitrequest
			ff_tx_clk       : in  std_logic                     := 'X';             -- clk
			ff_rx_clk       : in  std_logic                     := 'X';             -- clk
			ff_rx_data      : out std_logic_vector(7 downto 0);                     -- data
			ff_rx_eop       : out std_logic;                                        -- endofpacket
			rx_err          : out std_logic_vector(5 downto 0);                     -- error
			ff_rx_rdy       : in  std_logic                     := 'X';             -- ready
			ff_rx_sop       : out std_logic;                                        -- startofpacket
			ff_rx_dval      : out std_logic;                                        -- valid
			ff_tx_data      : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			ff_tx_eop       : in  std_logic                     := 'X';             -- endofpacket
			ff_tx_err       : in  std_logic                     := 'X';             -- error
			ff_tx_rdy       : out std_logic;                                        -- ready
			ff_tx_sop       : in  std_logic                     := 'X';             -- startofpacket
			ff_tx_wren      : in  std_logic                     := 'X';             -- valid
			xon_gen         : in  std_logic                     := 'X';             -- export
			xoff_gen        : in  std_logic                     := 'X';             -- export
			magic_wakeup    : out std_logic;                                        -- export
			magic_sleep_n   : in  std_logic                     := 'X';             -- export
			ff_tx_crc_fwd   : in  std_logic                     := 'X';             -- export
			ff_tx_septy     : out std_logic;                                        -- export
			tx_ff_uflow     : out std_logic;                                        -- export
			ff_tx_a_full    : out std_logic;                                        -- export
			ff_tx_a_empty   : out std_logic;                                        -- export
			rx_err_stat     : out std_logic_vector(17 downto 0);                    -- export
			rx_frm_type     : out std_logic_vector(3 downto 0);                     -- export
			ff_rx_dsav      : out std_logic;                                        -- export
			ff_rx_a_full    : out std_logic;                                        -- export
			ff_rx_a_empty   : out std_logic;                                        -- export
			gm_rx_d         : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- gmii_rx_d
			gm_rx_dv        : in  std_logic                     := 'X';             -- gmii_rx_dv
			gm_rx_err       : in  std_logic                     := 'X';             -- gmii_rx_err
			gm_tx_d         : out std_logic_vector(7 downto 0);                     -- gmii_tx_d
			gm_tx_en        : out std_logic;                                        -- gmii_tx_en
			gm_tx_err       : out std_logic;                                        -- gmii_tx_err
			m_rx_d          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- mii_rx_d
			m_rx_en         : in  std_logic                     := 'X';             -- mii_rx_dv
			m_rx_err        : in  std_logic                     := 'X';             -- mii_rx_err
			m_tx_d          : out std_logic_vector(3 downto 0);                     -- mii_tx_d
			m_tx_en         : out std_logic;                                        -- mii_tx_en
			m_tx_err        : out std_logic;                                        -- mii_tx_err
			m_rx_crs        : in  std_logic                     := 'X';             -- mii_crs
			m_rx_col        : in  std_logic                     := 'X';             -- mii_col
			set_10          : in  std_logic                     := 'X';             -- set_10
			set_1000        : in  std_logic                     := 'X';             -- set_1000
			rx_clkena       : in  std_logic                     := 'X';             -- rx_clkena
			tx_clkena       : in  std_logic                     := 'X';             -- tx_clkena
			tx_clk          : in  std_logic                     := 'X';             -- clk
			rx_clk          : in  std_logic                     := 'X';             -- clk
			ff_rx_mod       : out std_logic_vector(1 downto 0);                     -- export
			ff_tx_mod       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- export
			mac_eccstatus   : out std_logic_vector(1 downto 0);                     -- mac_eccstatus
			mdc             : out std_logic;                                        -- mdc
			mdio_in         : in  std_logic                     := 'X';             -- mdio_in
			mdio_out        : out std_logic;                                        -- mdio_out
			mdio_oen        : out std_logic;                                        -- mdio_oen
			rgmii_out1_aclr : out std_logic;                                        -- export
			rgmii_out1_din  : out std_logic_vector(1 downto 0);                     -- export
			rgmii_in1_dout  : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- export
			rgmii_in1_ck    : out std_logic;                                        -- export
			rgmii_out4_din  : out std_logic_vector(7 downto 0);                     -- export
			rgmii_out4_ck   : out std_logic;                                        -- export
			rgmii_in1_pad   : out std_logic;                                        -- export
			rgmii_out4_aclr : out std_logic;                                        -- export
			rgmii_out1_pad  : in  std_logic                     := 'X';             -- export
			rgmii_out1_ck   : out std_logic;                                        -- export
			rgmii_in4_dout  : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			rgmii_in4_pad   : out std_logic_vector(3 downto 0);                     -- export
			rgmii_out4_pad  : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- export
			rgmii_in4_ck    : out std_logic;                                        -- export
			rgmii_in        : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- rgmii_in
			rgmii_out       : out std_logic_vector(3 downto 0);                     -- rgmii_out
			rx_control      : in  std_logic                     := 'X';             -- rx_control
			tx_control      : out std_logic;                                        -- tx_control
			eth_mode        : out std_logic;                                        -- eth_mode
			ena_10          : out std_logic                                         -- ena_10
		);
	end component altera_eth_tse_mac;

	component altera_eth_tse_avalon_arbiter is
		generic (
			MAX_CHANNELS     : integer := 1;
			MAC_ONLY         : boolean := true;
			SLAVE_ADDR_WIDTH : integer := 8
		);
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			reg_data_out       : out std_logic_vector(31 downto 0);                    -- readdata
			reg_rd             : in  std_logic                     := 'X';             -- read
			reg_data_in        : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			reg_wr             : in  std_logic                     := 'X';             -- write
			reg_busy           : out std_logic;                                        -- waitrequest
			reg_addr           : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			mac_address_0      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_0     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_0         : out std_logic;                                        -- read
			mac_writedata_0    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_0        : out std_logic;                                        -- write
			mac_waitrequest_0  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_0      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_0     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_0         : out std_logic;                                        -- read
			pcs_writedata_0    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_0        : out std_logic;                                        -- write
			pcs_waitrequest_0  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_1      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_1     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_1         : out std_logic;                                        -- read
			mac_writedata_1    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_1        : out std_logic;                                        -- write
			mac_waitrequest_1  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_1      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_1     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_1         : out std_logic;                                        -- read
			pcs_writedata_1    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_1        : out std_logic;                                        -- write
			pcs_waitrequest_1  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_2      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_2     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_2         : out std_logic;                                        -- read
			mac_writedata_2    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_2        : out std_logic;                                        -- write
			mac_waitrequest_2  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_2      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_2     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_2         : out std_logic;                                        -- read
			pcs_writedata_2    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_2        : out std_logic;                                        -- write
			pcs_waitrequest_2  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_3      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_3     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_3         : out std_logic;                                        -- read
			mac_writedata_3    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_3        : out std_logic;                                        -- write
			mac_waitrequest_3  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_3      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_3     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_3         : out std_logic;                                        -- read
			pcs_writedata_3    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_3        : out std_logic;                                        -- write
			pcs_waitrequest_3  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_4      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_4     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_4         : out std_logic;                                        -- read
			mac_writedata_4    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_4        : out std_logic;                                        -- write
			mac_waitrequest_4  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_4      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_4     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_4         : out std_logic;                                        -- read
			pcs_writedata_4    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_4        : out std_logic;                                        -- write
			pcs_waitrequest_4  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_5      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_5     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_5         : out std_logic;                                        -- read
			mac_writedata_5    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_5        : out std_logic;                                        -- write
			mac_waitrequest_5  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_5      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_5     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_5         : out std_logic;                                        -- read
			pcs_writedata_5    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_5        : out std_logic;                                        -- write
			pcs_waitrequest_5  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_6      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_6     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_6         : out std_logic;                                        -- read
			mac_writedata_6    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_6        : out std_logic;                                        -- write
			mac_waitrequest_6  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_6      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_6     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_6         : out std_logic;                                        -- read
			pcs_writedata_6    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_6        : out std_logic;                                        -- write
			pcs_waitrequest_6  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_7      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_7     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_7         : out std_logic;                                        -- read
			mac_writedata_7    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_7        : out std_logic;                                        -- write
			mac_waitrequest_7  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_7      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_7     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_7         : out std_logic;                                        -- read
			pcs_writedata_7    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_7        : out std_logic;                                        -- write
			pcs_waitrequest_7  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_8      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_8     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_8         : out std_logic;                                        -- read
			mac_writedata_8    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_8        : out std_logic;                                        -- write
			mac_waitrequest_8  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_8      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_8     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_8         : out std_logic;                                        -- read
			pcs_writedata_8    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_8        : out std_logic;                                        -- write
			pcs_waitrequest_8  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_9      : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_9     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_9         : out std_logic;                                        -- read
			mac_writedata_9    : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_9        : out std_logic;                                        -- write
			mac_waitrequest_9  : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_9      : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_9     : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_9         : out std_logic;                                        -- read
			pcs_writedata_9    : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_9        : out std_logic;                                        -- write
			pcs_waitrequest_9  : in  std_logic                     := 'X';             -- waitrequest
			mac_address_10     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_10    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_10        : out std_logic;                                        -- read
			mac_writedata_10   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_10       : out std_logic;                                        -- write
			mac_waitrequest_10 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_10     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_10    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_10        : out std_logic;                                        -- read
			pcs_writedata_10   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_10       : out std_logic;                                        -- write
			pcs_waitrequest_10 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_11     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_11    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_11        : out std_logic;                                        -- read
			mac_writedata_11   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_11       : out std_logic;                                        -- write
			mac_waitrequest_11 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_11     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_11    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_11        : out std_logic;                                        -- read
			pcs_writedata_11   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_11       : out std_logic;                                        -- write
			pcs_waitrequest_11 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_12     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_12    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_12        : out std_logic;                                        -- read
			mac_writedata_12   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_12       : out std_logic;                                        -- write
			mac_waitrequest_12 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_12     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_12    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_12        : out std_logic;                                        -- read
			pcs_writedata_12   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_12       : out std_logic;                                        -- write
			pcs_waitrequest_12 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_13     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_13    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_13        : out std_logic;                                        -- read
			mac_writedata_13   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_13       : out std_logic;                                        -- write
			mac_waitrequest_13 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_13     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_13    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_13        : out std_logic;                                        -- read
			pcs_writedata_13   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_13       : out std_logic;                                        -- write
			pcs_waitrequest_13 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_14     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_14    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_14        : out std_logic;                                        -- read
			mac_writedata_14   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_14       : out std_logic;                                        -- write
			mac_waitrequest_14 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_14     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_14    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_14        : out std_logic;                                        -- read
			pcs_writedata_14   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_14       : out std_logic;                                        -- write
			pcs_waitrequest_14 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_15     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_15    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_15        : out std_logic;                                        -- read
			mac_writedata_15   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_15       : out std_logic;                                        -- write
			mac_waitrequest_15 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_15     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_15    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_15        : out std_logic;                                        -- read
			pcs_writedata_15   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_15       : out std_logic;                                        -- write
			pcs_waitrequest_15 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_16     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_16    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_16        : out std_logic;                                        -- read
			mac_writedata_16   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_16       : out std_logic;                                        -- write
			mac_waitrequest_16 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_16     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_16    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_16        : out std_logic;                                        -- read
			pcs_writedata_16   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_16       : out std_logic;                                        -- write
			pcs_waitrequest_16 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_17     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_17    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_17        : out std_logic;                                        -- read
			mac_writedata_17   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_17       : out std_logic;                                        -- write
			mac_waitrequest_17 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_17     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_17    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_17        : out std_logic;                                        -- read
			pcs_writedata_17   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_17       : out std_logic;                                        -- write
			pcs_waitrequest_17 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_18     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_18    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_18        : out std_logic;                                        -- read
			mac_writedata_18   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_18       : out std_logic;                                        -- write
			mac_waitrequest_18 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_18     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_18    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_18        : out std_logic;                                        -- read
			pcs_writedata_18   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_18       : out std_logic;                                        -- write
			pcs_waitrequest_18 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_19     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_19    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_19        : out std_logic;                                        -- read
			mac_writedata_19   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_19       : out std_logic;                                        -- write
			mac_waitrequest_19 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_19     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_19    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_19        : out std_logic;                                        -- read
			pcs_writedata_19   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_19       : out std_logic;                                        -- write
			pcs_waitrequest_19 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_20     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_20    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_20        : out std_logic;                                        -- read
			mac_writedata_20   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_20       : out std_logic;                                        -- write
			mac_waitrequest_20 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_20     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_20    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_20        : out std_logic;                                        -- read
			pcs_writedata_20   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_20       : out std_logic;                                        -- write
			pcs_waitrequest_20 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_21     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_21    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_21        : out std_logic;                                        -- read
			mac_writedata_21   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_21       : out std_logic;                                        -- write
			mac_waitrequest_21 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_21     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_21    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_21        : out std_logic;                                        -- read
			pcs_writedata_21   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_21       : out std_logic;                                        -- write
			pcs_waitrequest_21 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_22     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_22    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_22        : out std_logic;                                        -- read
			mac_writedata_22   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_22       : out std_logic;                                        -- write
			mac_waitrequest_22 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_22     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_22    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_22        : out std_logic;                                        -- read
			pcs_writedata_22   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_22       : out std_logic;                                        -- write
			pcs_waitrequest_22 : in  std_logic                     := 'X';             -- waitrequest
			mac_address_23     : out std_logic_vector(7 downto 0);                     -- address
			mac_readdata_23    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			mac_read_23        : out std_logic;                                        -- read
			mac_writedata_23   : out std_logic_vector(31 downto 0);                    -- writedata
			mac_write_23       : out std_logic;                                        -- write
			mac_waitrequest_23 : in  std_logic                     := 'X';             -- waitrequest
			pcs_address_23     : out std_logic_vector(4 downto 0);                     -- address
			pcs_readdata_23    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			pcs_read_23        : out std_logic;                                        -- read
			pcs_writedata_23   : out std_logic_vector(15 downto 0);                    -- writedata
			pcs_write_23       : out std_logic;                                        -- write
			pcs_waitrequest_23 : in  std_logic                     := 'X'              -- waitrequest
		);
	end component altera_eth_tse_avalon_arbiter;

	component altera_eth_tse_pcs_pma_gxb is
		generic (
			DEV_VERSION        : integer := 0;
			DEVICE_FAMILY      : string  := "";
			SYNCHRONIZER_DEPTH : integer := 3;
			ENABLE_CLK_SHARING : boolean := false;
			ENABLE_SGMII       : boolean := false;
			PHY_IDENTIFIER     : integer := 0
		);
		port (
			gxb_pwrdn_in_to_pcs          : in  std_logic                     := 'X';             -- export
			rx_pcs_clk                   : in  std_logic                     := 'X';             -- export
			sd_loopback                  : out std_logic;                                        -- export
			rx_freqlocked                : in  std_logic                     := 'X';             -- export
			rx_disp_err                  : in  std_logic                     := 'X';             -- export
			rx_runningdisp               : in  std_logic                     := 'X';             -- export
			tx_pcs_clk                   : in  std_logic                     := 'X';             -- export
			rx_digitalreset_sqcnr_rx_clk : out std_logic;                                        -- export
			rx_analogreset_sqcnr         : out std_logic;                                        -- export
			rx_frame                     : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- export
			rx_rmfifodatadeleted         : in  std_logic                     := 'X';             -- export
			rx_runlengthviolation        : in  std_logic                     := 'X';             -- export
			rx_char_err_gx               : in  std_logic                     := 'X';             -- export
			tx_frame                     : out std_logic_vector(7 downto 0);                     -- export
			tx_digitalreset_sqcnr_tx_clk : out std_logic;                                        -- export
			pcs_pwrdn_out_from_pcs       : out std_logic;                                        -- export
			rx_patterndetect             : in  std_logic                     := 'X';             -- export
			pll_locked                   : in  std_logic                     := 'X';             -- export
			rx_syncstatus                : in  std_logic                     := 'X';             -- export
			rx_kchar                     : in  std_logic                     := 'X';             -- export
			rx_rmfifodatainserted        : in  std_logic                     := 'X';             -- export
			tx_kchar                     : out std_logic;                                        -- export
			reconfig_busy_to_pcs         : in  std_logic                     := 'X';             -- export
			clk                          : in  std_logic                     := 'X';             -- clk
			reset                        : in  std_logic                     := 'X';             -- reset
			reg_addr                     : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- address
			reg_data_out                 : out std_logic_vector(15 downto 0);                    -- readdata
			reg_rd                       : in  std_logic                     := 'X';             -- read
			reg_data_in                  : in  std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			reg_wr                       : in  std_logic                     := 'X';             -- write
			reg_busy                     : out std_logic;                                        -- waitrequest
			ref_clk                      : in  std_logic                     := 'X';             -- clk
			tx_clkena                    : out std_logic;                                        -- tx_clkena
			rx_clkena                    : out std_logic;                                        -- rx_clkena
			gmii_rx_dv                   : out std_logic;                                        -- gmii_rx_dv
			gmii_rx_d                    : out std_logic_vector(7 downto 0);                     -- gmii_rx_d
			gmii_rx_err                  : out std_logic;                                        -- gmii_rx_err
			gmii_tx_en                   : in  std_logic                     := 'X';             -- gmii_tx_en
			gmii_tx_d                    : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- gmii_tx_d
			gmii_tx_err                  : in  std_logic                     := 'X';             -- gmii_tx_err
			mii_rx_dv                    : out std_logic;                                        -- mii_rx_dv
			mii_rx_d                     : out std_logic_vector(3 downto 0);                     -- mii_rx_d
			mii_rx_err                   : out std_logic;                                        -- mii_rx_err
			mii_tx_en                    : in  std_logic                     := 'X';             -- mii_tx_en
			mii_tx_d                     : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- mii_tx_d
			mii_tx_err                   : in  std_logic                     := 'X';             -- mii_tx_err
			mii_col                      : out std_logic;                                        -- mii_col
			mii_crs                      : out std_logic;                                        -- mii_crs
			set_10                       : out std_logic;                                        -- set_10
			set_1000                     : out std_logic;                                        -- set_1000
			tx_clk                       : out std_logic;                                        -- clk
			rx_clk                       : out std_logic;                                        -- clk
			reset_tx_clk                 : in  std_logic                     := 'X';             -- reset
			reset_rx_clk                 : in  std_logic                     := 'X';             -- reset
			led_crs                      : out std_logic;                                        -- export
			led_link                     : out std_logic;                                        -- export
			led_panel_link               : out std_logic;                                        -- export
			led_col                      : out std_logic;                                        -- export
			led_an                       : out std_logic;                                        -- export
			led_char_err                 : out std_logic;                                        -- export
			led_disp_err                 : out std_logic;                                        -- export
			set_100                      : out std_logic;                                        -- set_100
			hd_ena                       : out std_logic                                         -- hd_ena
		);
	end component altera_eth_tse_pcs_pma_gxb;

	component altera_eth_tse_altgxb_0001 is
		port (
			rx_digitalreset_sqcnr_rx_clk : in  std_logic                    := 'X';             -- export
			rx_syncstatus                : out std_logic;                                       -- export
			rx_runlengthviolation        : out std_logic;                                       -- export
			rx_char_err_gx               : out std_logic;                                       -- export
			rx_freqlocked                : out std_logic;                                       -- export
			tx_frame                     : in  std_logic_vector(7 downto 0) := (others => 'X'); -- export
			rx_frame                     : out std_logic_vector(7 downto 0);                    -- export
			tx_pcs_clk                   : out std_logic;                                       -- export
			pcs_pwrdn_out_from_pcs       : in  std_logic                    := 'X';             -- export
			pll_locked                   : out std_logic;                                       -- export
			rx_analogreset_sqcnr         : in  std_logic                    := 'X';             -- export
			rx_pcs_clk                   : out std_logic;                                       -- export
			gxb_pwrdn_in_to_pcs          : out std_logic;                                       -- export
			rx_rmfifodatainserted        : out std_logic;                                       -- export
			tx_kchar                     : in  std_logic                    := 'X';             -- export
			rx_kchar                     : out std_logic;                                       -- export
			rx_patterndetect             : out std_logic;                                       -- export
			reconfig_busy_to_pcs         : out std_logic;                                       -- export
			sd_loopback                  : in  std_logic                    := 'X';             -- export
			tx_digitalreset_sqcnr_tx_clk : in  std_logic                    := 'X';             -- export
			rx_disp_err                  : out std_logic;                                       -- export
			rx_runningdisp               : out std_logic;                                       -- export
			rx_rmfifodatadeleted         : out std_logic;                                       -- export
			ref_clk                      : in  std_logic                    := 'X';             -- clk
			rx_recovclkout               : out std_logic;                                       -- export
			reconfig_clk                 : in  std_logic                    := 'X';             -- export
			reconfig_togxb               : in  std_logic_vector(3 downto 0) := (others => 'X'); -- export
			reconfig_fromgxb             : out std_logic_vector(4 downto 0);                    -- export
			reconfig_busy                : in  std_logic                    := 'X';             -- export
			txp                          : out std_logic;                                       -- export
			rxp                          : in  std_logic                    := 'X';             -- export
			gxb_cal_blk_clk              : in  std_logic                    := 'X'              -- clk
		);
	end component altera_eth_tse_altgxb_0001;

	component altera_reset_controller is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset
			clk            : in  std_logic := 'X'; -- clk
			reset_out      : out std_logic;        -- reset
			reset_req      : out std_logic;        -- reset_req
			reset_req_in0  : in  std_logic := 'X'; -- reset_req
			reset_in1      : in  std_logic := 'X'; -- reset
			reset_req_in1  : in  std_logic := 'X'; -- reset_req
			reset_in2      : in  std_logic := 'X'; -- reset
			reset_req_in2  : in  std_logic := 'X'; -- reset_req
			reset_in3      : in  std_logic := 'X'; -- reset
			reset_req_in3  : in  std_logic := 'X'; -- reset_req
			reset_in4      : in  std_logic := 'X'; -- reset
			reset_req_in4  : in  std_logic := 'X'; -- reset_req
			reset_in5      : in  std_logic := 'X'; -- reset
			reset_req_in5  : in  std_logic := 'X'; -- reset_req
			reset_in6      : in  std_logic := 'X'; -- reset
			reset_req_in6  : in  std_logic := 'X'; -- reset_req
			reset_in7      : in  std_logic := 'X'; -- reset
			reset_req_in7  : in  std_logic := 'X'; -- reset_req
			reset_in8      : in  std_logic := 'X'; -- reset
			reset_req_in8  : in  std_logic := 'X'; -- reset_req
			reset_in9      : in  std_logic := 'X'; -- reset
			reset_req_in9  : in  std_logic := 'X'; -- reset_req
			reset_in10     : in  std_logic := 'X'; -- reset
			reset_req_in10 : in  std_logic := 'X'; -- reset_req
			reset_in11     : in  std_logic := 'X'; -- reset
			reset_req_in11 : in  std_logic := 'X'; -- reset_req
			reset_in12     : in  std_logic := 'X'; -- reset
			reset_req_in12 : in  std_logic := 'X'; -- reset_req
			reset_in13     : in  std_logic := 'X'; -- reset
			reset_req_in13 : in  std_logic := 'X'; -- reset_req
			reset_in14     : in  std_logic := 'X'; -- reset
			reset_req_in14 : in  std_logic := 'X'; -- reset_req
			reset_in15     : in  std_logic := 'X'; -- reset
			reset_req_in15 : in  std_logic := 'X'  -- reset_req
		);
	end component altera_reset_controller;

	signal avalon_arbiter_av_mac_master_0_readdata         : std_logic_vector(31 downto 0); -- i_tse_mac:reg_data_out -> avalon_arbiter:mac_readdata_0
	signal avalon_arbiter_av_mac_master_0_waitrequest      : std_logic;                     -- i_tse_mac:reg_busy -> avalon_arbiter:mac_waitrequest_0
	signal avalon_arbiter_av_mac_master_0_address          : std_logic_vector(7 downto 0);  -- avalon_arbiter:mac_address_0 -> i_tse_mac:reg_addr
	signal avalon_arbiter_av_mac_master_0_read             : std_logic;                     -- avalon_arbiter:mac_read_0 -> i_tse_mac:reg_rd
	signal avalon_arbiter_av_mac_master_0_writedata        : std_logic_vector(31 downto 0); -- avalon_arbiter:mac_writedata_0 -> i_tse_mac:reg_data_in
	signal avalon_arbiter_av_mac_master_0_write            : std_logic;                     -- avalon_arbiter:mac_write_0 -> i_tse_mac:reg_wr
	signal i_altgxb_0_gxb_pwrdn_in_to_pcs_export           : std_logic;                     -- i_altgxb_0:gxb_pwrdn_in_to_pcs -> i_tse_pcs_0:gxb_pwrdn_in_to_pcs
	signal i_altgxb_0_rx_pcs_clk_export                    : std_logic;                     -- i_altgxb_0:rx_pcs_clk -> i_tse_pcs_0:rx_pcs_clk
	signal i_tse_pcs_0_sd_loopback_export                  : std_logic;                     -- i_tse_pcs_0:sd_loopback -> i_altgxb_0:sd_loopback
	signal i_altgxb_0_rx_freqlocked_export                 : std_logic;                     -- i_altgxb_0:rx_freqlocked -> i_tse_pcs_0:rx_freqlocked
	signal i_altgxb_0_rx_disp_err_export                   : std_logic;                     -- i_altgxb_0:rx_disp_err -> i_tse_pcs_0:rx_disp_err
	signal i_altgxb_0_rx_runningdisp_export                : std_logic;                     -- i_altgxb_0:rx_runningdisp -> i_tse_pcs_0:rx_runningdisp
	signal i_altgxb_0_tx_pcs_clk_export                    : std_logic;                     -- i_altgxb_0:tx_pcs_clk -> i_tse_pcs_0:tx_pcs_clk
	signal i_tse_pcs_0_rx_digitalreset_sqcnr_rx_clk_export : std_logic;                     -- i_tse_pcs_0:rx_digitalreset_sqcnr_rx_clk -> i_altgxb_0:rx_digitalreset_sqcnr_rx_clk
	signal i_tse_pcs_0_rx_analogreset_sqcnr_export         : std_logic;                     -- i_tse_pcs_0:rx_analogreset_sqcnr -> i_altgxb_0:rx_analogreset_sqcnr
	signal i_altgxb_0_rx_frame_export                      : std_logic_vector(7 downto 0);  -- i_altgxb_0:rx_frame -> i_tse_pcs_0:rx_frame
	signal i_altgxb_0_rx_rmfifodatadeleted_export          : std_logic;                     -- i_altgxb_0:rx_rmfifodatadeleted -> i_tse_pcs_0:rx_rmfifodatadeleted
	signal i_altgxb_0_rx_runlengthviolation_export         : std_logic;                     -- i_altgxb_0:rx_runlengthviolation -> i_tse_pcs_0:rx_runlengthviolation
	signal i_altgxb_0_rx_char_err_gx_export                : std_logic;                     -- i_altgxb_0:rx_char_err_gx -> i_tse_pcs_0:rx_char_err_gx
	signal i_tse_pcs_0_tx_frame_export                     : std_logic_vector(7 downto 0);  -- i_tse_pcs_0:tx_frame -> i_altgxb_0:tx_frame
	signal i_tse_pcs_0_tx_digitalreset_sqcnr_tx_clk_export : std_logic;                     -- i_tse_pcs_0:tx_digitalreset_sqcnr_tx_clk -> i_altgxb_0:tx_digitalreset_sqcnr_tx_clk
	signal i_tse_pcs_0_pcs_pwrdn_out_from_pcs_export       : std_logic;                     -- i_tse_pcs_0:pcs_pwrdn_out_from_pcs -> i_altgxb_0:pcs_pwrdn_out_from_pcs
	signal i_altgxb_0_rx_patterndetect_export              : std_logic;                     -- i_altgxb_0:rx_patterndetect -> i_tse_pcs_0:rx_patterndetect
	signal i_altgxb_0_pll_locked_export                    : std_logic;                     -- i_altgxb_0:pll_locked -> i_tse_pcs_0:pll_locked
	signal i_altgxb_0_rx_syncstatus_export                 : std_logic;                     -- i_altgxb_0:rx_syncstatus -> i_tse_pcs_0:rx_syncstatus
	signal i_altgxb_0_rx_kchar_export                      : std_logic;                     -- i_altgxb_0:rx_kchar -> i_tse_pcs_0:rx_kchar
	signal i_altgxb_0_rx_rmfifodatainserted_export         : std_logic;                     -- i_altgxb_0:rx_rmfifodatainserted -> i_tse_pcs_0:rx_rmfifodatainserted
	signal i_tse_pcs_0_tx_kchar_export                     : std_logic;                     -- i_tse_pcs_0:tx_kchar -> i_altgxb_0:tx_kchar
	signal i_altgxb_0_reconfig_busy_to_pcs_export          : std_logic;                     -- i_altgxb_0:reconfig_busy_to_pcs -> i_tse_pcs_0:reconfig_busy_to_pcs
	signal avalon_arbiter_av_pcs_master_0_readdata         : std_logic_vector(15 downto 0); -- i_tse_pcs_0:reg_data_out -> avalon_arbiter:pcs_readdata_0
	signal avalon_arbiter_av_pcs_master_0_waitrequest      : std_logic;                     -- i_tse_pcs_0:reg_busy -> avalon_arbiter:pcs_waitrequest_0
	signal avalon_arbiter_av_pcs_master_0_address          : std_logic_vector(4 downto 0);  -- avalon_arbiter:pcs_address_0 -> i_tse_pcs_0:reg_addr
	signal avalon_arbiter_av_pcs_master_0_read             : std_logic;                     -- avalon_arbiter:pcs_read_0 -> i_tse_pcs_0:reg_rd
	signal avalon_arbiter_av_pcs_master_0_writedata        : std_logic_vector(15 downto 0); -- avalon_arbiter:pcs_writedata_0 -> i_tse_pcs_0:reg_data_in
	signal avalon_arbiter_av_pcs_master_0_write            : std_logic;                     -- avalon_arbiter:pcs_write_0 -> i_tse_pcs_0:reg_wr
	signal i_tse_pcs_0_pcs_transmit_clock_connection_clk   : std_logic;                     -- i_tse_pcs_0:tx_clk -> [i_tse_mac:tx_clk, rst_controller:clk]
	signal i_tse_pcs_0_pcs_receive_clock_connection_clk    : std_logic;                     -- i_tse_pcs_0:rx_clk -> [i_tse_mac:rx_clk, rst_controller_001:clk]
	signal i_tse_pcs_0_gmii_connection_gmii_rx_d           : std_logic_vector(7 downto 0);  -- i_tse_pcs_0:gmii_rx_d -> i_tse_mac:gm_rx_d
	signal i_tse_pcs_0_gmii_connection_gmii_rx_err         : std_logic;                     -- i_tse_pcs_0:gmii_rx_err -> i_tse_mac:gm_rx_err
	signal i_tse_pcs_0_gmii_connection_gmii_rx_dv          : std_logic;                     -- i_tse_pcs_0:gmii_rx_dv -> i_tse_mac:gm_rx_dv
	signal i_tse_mac_mac_gmii_connection_gmii_tx_d         : std_logic_vector(7 downto 0);  -- i_tse_mac:gm_tx_d -> i_tse_pcs_0:gmii_tx_d
	signal i_tse_mac_mac_gmii_connection_gmii_tx_en        : std_logic;                     -- i_tse_mac:gm_tx_en -> i_tse_pcs_0:gmii_tx_en
	signal i_tse_mac_mac_gmii_connection_gmii_tx_err       : std_logic;                     -- i_tse_mac:gm_tx_err -> i_tse_pcs_0:gmii_tx_err
	signal i_tse_mac_mac_mii_connection_mii_tx_en          : std_logic;                     -- i_tse_mac:m_tx_en -> i_tse_pcs_0:mii_tx_en
	signal i_tse_pcs_0_mii_connection_mii_rx_d             : std_logic_vector(3 downto 0);  -- i_tse_pcs_0:mii_rx_d -> i_tse_mac:m_rx_d
	signal i_tse_pcs_0_mii_connection_mii_col              : std_logic;                     -- i_tse_pcs_0:mii_col -> i_tse_mac:m_rx_col
	signal i_tse_mac_mac_mii_connection_mii_tx_d           : std_logic_vector(3 downto 0);  -- i_tse_mac:m_tx_d -> i_tse_pcs_0:mii_tx_d
	signal i_tse_mac_mac_mii_connection_mii_tx_err         : std_logic;                     -- i_tse_mac:m_tx_err -> i_tse_pcs_0:mii_tx_err
	signal i_tse_pcs_0_mii_connection_mii_crs              : std_logic;                     -- i_tse_pcs_0:mii_crs -> i_tse_mac:m_rx_crs
	signal i_tse_pcs_0_mii_connection_mii_rx_err           : std_logic;                     -- i_tse_pcs_0:mii_rx_err -> i_tse_mac:m_rx_err
	signal i_tse_pcs_0_mii_connection_mii_rx_dv            : std_logic;                     -- i_tse_pcs_0:mii_rx_dv -> i_tse_mac:m_rx_en
	signal i_tse_pcs_0_sgmii_status_connection_set_1000    : std_logic;                     -- i_tse_pcs_0:set_1000 -> i_tse_mac:set_1000
	signal i_tse_pcs_0_sgmii_status_connection_set_10      : std_logic;                     -- i_tse_pcs_0:set_10 -> i_tse_mac:set_10
	signal i_tse_pcs_0_clock_enable_connection_tx_clkena   : std_logic;                     -- i_tse_pcs_0:tx_clkena -> i_tse_mac:tx_clkena
	signal i_tse_pcs_0_clock_enable_connection_rx_clkena   : std_logic;                     -- i_tse_pcs_0:rx_clkena -> i_tse_mac:rx_clkena
	signal rst_controller_reset_out_reset                  : std_logic;                     -- rst_controller:reset_out -> i_tse_pcs_0:reset_tx_clk
	signal rst_controller_001_reset_out_reset              : std_logic;                     -- rst_controller_001:reset_out -> i_tse_pcs_0:reset_rx_clk

begin

	i_tse_mac : component altera_eth_tse_mac
		generic map (
			ING_ADDR                 => 13,
			ENABLE_MAC_RX_VLAN       => true,
			ENABLE_SUP_ADDR          => false,
			DEVICE_FAMILY            => "STINGRAY",
			INSERT_TA                => false,
			ING_FIFO                 => 8192,
			ENABLE_ECC               => false,
			CRC32DWIDTH              => 8,
			ENABLE_ENA               => 8,
			SYNCHRONIZER_DEPTH       => 3,
			ENABLE_MAC_TX_VLAN       => true,
			RESET_LEVEL              => 1,
			STAT_CNT_ENA             => true,
			CUST_VERSION             => 0,
			CRC32S1L2_EXTERN         => false,
			MBIT_ONLY                => true,
			EG_ADDR                  => 13,
			CORE_VERSION             => 4097,
			CRC32GENDELAY            => 6,
			EG_FIFO                  => 8192,
			REDUCED_INTERFACE_ENA    => false,
			ENABLE_MAGIC_DETECT      => true,
			ENABLE_MDIO              => false,
			ENABLE_MAC_TXADDR_SET    => true,
			RAM_TYPE                 => "AUTO",
			CRC32CHECK16BIT          => 0,
			ENABLE_LGTH_CHECK        => true,
			ENABLE_MAC_FLOW_CTRL     => true,
			ENABLE_SHIFT16           => false,
			USE_SYNC_RESET           => true,
			REDUCED_CONTROL          => false,
			MDIO_CLK_DIV             => 40,
			ENABLE_PADDING           => true,
			ENABLE_GMII_LOOPBACK     => false,
			GBIT_ONLY                => true,
			ENA_HASH                 => false,
			ENABLE_EXTENDED_STAT_REG => false,
			ENABLE_HD_LOGIC          => false
		)
		port map (
			clk             => clk,                                           -- control_port_clock_connection.clk
			reset           => reset,                                         --              reset_connection.reset
			reg_addr        => avalon_arbiter_av_mac_master_0_address,        --                  control_port.address
			reg_data_out    => avalon_arbiter_av_mac_master_0_readdata,       --                              .readdata
			reg_rd          => avalon_arbiter_av_mac_master_0_read,           --                              .read
			reg_data_in     => avalon_arbiter_av_mac_master_0_writedata,      --                              .writedata
			reg_wr          => avalon_arbiter_av_mac_master_0_write,          --                              .write
			reg_busy        => avalon_arbiter_av_mac_master_0_waitrequest,    --                              .waitrequest
			ff_tx_clk       => ff_tx_clk,                                     --     transmit_clock_connection.clk
			ff_rx_clk       => ff_rx_clk,                                     --      receive_clock_connection.clk
			ff_rx_data      => ff_rx_data,                                    --                       receive.data
			ff_rx_eop       => ff_rx_eop,                                     --                              .endofpacket
			rx_err          => rx_err,                                        --                              .error
			ff_rx_rdy       => ff_rx_rdy,                                     --                              .ready
			ff_rx_sop       => ff_rx_sop,                                     --                              .startofpacket
			ff_rx_dval      => ff_rx_dval,                                    --                              .valid
			ff_tx_data      => ff_tx_data,                                    --                      transmit.data
			ff_tx_eop       => ff_tx_eop,                                     --                              .endofpacket
			ff_tx_err       => ff_tx_err,                                     --                              .error
			ff_tx_rdy       => ff_tx_rdy,                                     --                              .ready
			ff_tx_sop       => ff_tx_sop,                                     --                              .startofpacket
			ff_tx_wren      => ff_tx_wren,                                    --                              .valid
			xon_gen         => xon_gen,                                       --           mac_misc_connection.export
			xoff_gen        => xoff_gen,                                      --                              .export
			magic_wakeup    => magic_wakeup,                                  --                              .export
			magic_sleep_n   => magic_sleep_n,                                 --                              .export
			ff_tx_crc_fwd   => ff_tx_crc_fwd,                                 --                              .export
			ff_tx_septy     => ff_tx_septy,                                   --                              .export
			tx_ff_uflow     => tx_ff_uflow,                                   --                              .export
			ff_tx_a_full    => ff_tx_a_full,                                  --                              .export
			ff_tx_a_empty   => ff_tx_a_empty,                                 --                              .export
			rx_err_stat     => rx_err_stat,                                   --                              .export
			rx_frm_type     => rx_frm_type,                                   --                              .export
			ff_rx_dsav      => ff_rx_dsav,                                    --                              .export
			ff_rx_a_full    => ff_rx_a_full,                                  --                              .export
			ff_rx_a_empty   => ff_rx_a_empty,                                 --                              .export
			gm_rx_d         => i_tse_pcs_0_gmii_connection_gmii_rx_d,         --           mac_gmii_connection.gmii_rx_d
			gm_rx_dv        => i_tse_pcs_0_gmii_connection_gmii_rx_dv,        --                              .gmii_rx_dv
			gm_rx_err       => i_tse_pcs_0_gmii_connection_gmii_rx_err,       --                              .gmii_rx_err
			gm_tx_d         => i_tse_mac_mac_gmii_connection_gmii_tx_d,       --                              .gmii_tx_d
			gm_tx_en        => i_tse_mac_mac_gmii_connection_gmii_tx_en,      --                              .gmii_tx_en
			gm_tx_err       => i_tse_mac_mac_gmii_connection_gmii_tx_err,     --                              .gmii_tx_err
			m_rx_d          => i_tse_pcs_0_mii_connection_mii_rx_d,           --            mac_mii_connection.mii_rx_d
			m_rx_en         => i_tse_pcs_0_mii_connection_mii_rx_dv,          --                              .mii_rx_dv
			m_rx_err        => i_tse_pcs_0_mii_connection_mii_rx_err,         --                              .mii_rx_err
			m_tx_d          => i_tse_mac_mac_mii_connection_mii_tx_d,         --                              .mii_tx_d
			m_tx_en         => i_tse_mac_mac_mii_connection_mii_tx_en,        --                              .mii_tx_en
			m_tx_err        => i_tse_mac_mac_mii_connection_mii_tx_err,       --                              .mii_tx_err
			m_rx_crs        => i_tse_pcs_0_mii_connection_mii_crs,            --                              .mii_crs
			m_rx_col        => i_tse_pcs_0_mii_connection_mii_col,            --                              .mii_col
			set_10          => i_tse_pcs_0_sgmii_status_connection_set_10,    --         mac_status_connection.set_10
			set_1000        => i_tse_pcs_0_sgmii_status_connection_set_1000,  --                              .set_1000
			rx_clkena       => i_tse_pcs_0_clock_enable_connection_rx_clkena, --         mac_clkena_connection.rx_clkena
			tx_clkena       => i_tse_pcs_0_clock_enable_connection_tx_clkena, --                              .tx_clkena
			tx_clk          => i_tse_pcs_0_pcs_transmit_clock_connection_clk, --   pcs_mac_tx_clock_connection.clk
			rx_clk          => i_tse_pcs_0_pcs_receive_clock_connection_clk,  --   pcs_mac_rx_clock_connection.clk
			ff_rx_mod       => open,                                          --                   (terminated)
			ff_tx_mod       => "00",                                          --                   (terminated)
			mac_eccstatus   => open,                                          --                   (terminated)
			mdc             => open,                                          --                   (terminated)
			mdio_in         => '0',                                           --                   (terminated)
			mdio_out        => open,                                          --                   (terminated)
			mdio_oen        => open,                                          --                   (terminated)
			rgmii_out1_aclr => open,                                          --                   (terminated)
			rgmii_out1_din  => open,                                          --                   (terminated)
			rgmii_in1_dout  => "00",                                          --                   (terminated)
			rgmii_in1_ck    => open,                                          --                   (terminated)
			rgmii_out4_din  => open,                                          --                   (terminated)
			rgmii_out4_ck   => open,                                          --                   (terminated)
			rgmii_in1_pad   => open,                                          --                   (terminated)
			rgmii_out4_aclr => open,                                          --                   (terminated)
			rgmii_out1_pad  => '0',                                           --                   (terminated)
			rgmii_out1_ck   => open,                                          --                   (terminated)
			rgmii_in4_dout  => "00000000",                                    --                   (terminated)
			rgmii_in4_pad   => open,                                          --                   (terminated)
			rgmii_out4_pad  => "0000",                                        --                   (terminated)
			rgmii_in4_ck    => open,                                          --                   (terminated)
			rgmii_in        => "0000",                                        --                   (terminated)
			rgmii_out       => open,                                          --                   (terminated)
			rx_control      => '0',                                           --                   (terminated)
			tx_control      => open,                                          --                   (terminated)
			eth_mode        => open,                                          --                   (terminated)
			ena_10          => open                                           --                   (terminated)
		);

	avalon_arbiter : component altera_eth_tse_avalon_arbiter
		generic map (
			MAX_CHANNELS     => 1,
			MAC_ONLY         => false,
			SLAVE_ADDR_WIDTH => 8
		)
		port map (
			clk                => clk,                                        --             clk.clk
			reset              => reset,                                      --           reset.reset
			reg_data_out       => reg_data_out,                               --        av_slave.readdata
			reg_rd             => reg_rd,                                     --                .read
			reg_data_in        => reg_data_in,                                --                .writedata
			reg_wr             => reg_wr,                                     --                .write
			reg_busy           => reg_busy,                                   --                .waitrequest
			reg_addr           => reg_addr,                                   --                .address
			mac_address_0      => avalon_arbiter_av_mac_master_0_address,     -- av_mac_master_0.address
			mac_readdata_0     => avalon_arbiter_av_mac_master_0_readdata,    --                .readdata
			mac_read_0         => avalon_arbiter_av_mac_master_0_read,        --                .read
			mac_writedata_0    => avalon_arbiter_av_mac_master_0_writedata,   --                .writedata
			mac_write_0        => avalon_arbiter_av_mac_master_0_write,       --                .write
			mac_waitrequest_0  => avalon_arbiter_av_mac_master_0_waitrequest, --                .waitrequest
			pcs_address_0      => avalon_arbiter_av_pcs_master_0_address,     -- av_pcs_master_0.address
			pcs_readdata_0     => avalon_arbiter_av_pcs_master_0_readdata,    --                .readdata
			pcs_read_0         => avalon_arbiter_av_pcs_master_0_read,        --                .read
			pcs_writedata_0    => avalon_arbiter_av_pcs_master_0_writedata,   --                .writedata
			pcs_write_0        => avalon_arbiter_av_pcs_master_0_write,       --                .write
			pcs_waitrequest_0  => avalon_arbiter_av_pcs_master_0_waitrequest, --                .waitrequest
			mac_address_1      => open,                                       --     (terminated)
			mac_readdata_1     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_1         => open,                                       --     (terminated)
			mac_writedata_1    => open,                                       --     (terminated)
			mac_write_1        => open,                                       --     (terminated)
			mac_waitrequest_1  => '0',                                        --     (terminated)
			pcs_address_1      => open,                                       --     (terminated)
			pcs_readdata_1     => "0000000000000000",                         --     (terminated)
			pcs_read_1         => open,                                       --     (terminated)
			pcs_writedata_1    => open,                                       --     (terminated)
			pcs_write_1        => open,                                       --     (terminated)
			pcs_waitrequest_1  => '0',                                        --     (terminated)
			mac_address_2      => open,                                       --     (terminated)
			mac_readdata_2     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_2         => open,                                       --     (terminated)
			mac_writedata_2    => open,                                       --     (terminated)
			mac_write_2        => open,                                       --     (terminated)
			mac_waitrequest_2  => '0',                                        --     (terminated)
			pcs_address_2      => open,                                       --     (terminated)
			pcs_readdata_2     => "0000000000000000",                         --     (terminated)
			pcs_read_2         => open,                                       --     (terminated)
			pcs_writedata_2    => open,                                       --     (terminated)
			pcs_write_2        => open,                                       --     (terminated)
			pcs_waitrequest_2  => '0',                                        --     (terminated)
			mac_address_3      => open,                                       --     (terminated)
			mac_readdata_3     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_3         => open,                                       --     (terminated)
			mac_writedata_3    => open,                                       --     (terminated)
			mac_write_3        => open,                                       --     (terminated)
			mac_waitrequest_3  => '0',                                        --     (terminated)
			pcs_address_3      => open,                                       --     (terminated)
			pcs_readdata_3     => "0000000000000000",                         --     (terminated)
			pcs_read_3         => open,                                       --     (terminated)
			pcs_writedata_3    => open,                                       --     (terminated)
			pcs_write_3        => open,                                       --     (terminated)
			pcs_waitrequest_3  => '0',                                        --     (terminated)
			mac_address_4      => open,                                       --     (terminated)
			mac_readdata_4     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_4         => open,                                       --     (terminated)
			mac_writedata_4    => open,                                       --     (terminated)
			mac_write_4        => open,                                       --     (terminated)
			mac_waitrequest_4  => '0',                                        --     (terminated)
			pcs_address_4      => open,                                       --     (terminated)
			pcs_readdata_4     => "0000000000000000",                         --     (terminated)
			pcs_read_4         => open,                                       --     (terminated)
			pcs_writedata_4    => open,                                       --     (terminated)
			pcs_write_4        => open,                                       --     (terminated)
			pcs_waitrequest_4  => '0',                                        --     (terminated)
			mac_address_5      => open,                                       --     (terminated)
			mac_readdata_5     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_5         => open,                                       --     (terminated)
			mac_writedata_5    => open,                                       --     (terminated)
			mac_write_5        => open,                                       --     (terminated)
			mac_waitrequest_5  => '0',                                        --     (terminated)
			pcs_address_5      => open,                                       --     (terminated)
			pcs_readdata_5     => "0000000000000000",                         --     (terminated)
			pcs_read_5         => open,                                       --     (terminated)
			pcs_writedata_5    => open,                                       --     (terminated)
			pcs_write_5        => open,                                       --     (terminated)
			pcs_waitrequest_5  => '0',                                        --     (terminated)
			mac_address_6      => open,                                       --     (terminated)
			mac_readdata_6     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_6         => open,                                       --     (terminated)
			mac_writedata_6    => open,                                       --     (terminated)
			mac_write_6        => open,                                       --     (terminated)
			mac_waitrequest_6  => '0',                                        --     (terminated)
			pcs_address_6      => open,                                       --     (terminated)
			pcs_readdata_6     => "0000000000000000",                         --     (terminated)
			pcs_read_6         => open,                                       --     (terminated)
			pcs_writedata_6    => open,                                       --     (terminated)
			pcs_write_6        => open,                                       --     (terminated)
			pcs_waitrequest_6  => '0',                                        --     (terminated)
			mac_address_7      => open,                                       --     (terminated)
			mac_readdata_7     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_7         => open,                                       --     (terminated)
			mac_writedata_7    => open,                                       --     (terminated)
			mac_write_7        => open,                                       --     (terminated)
			mac_waitrequest_7  => '0',                                        --     (terminated)
			pcs_address_7      => open,                                       --     (terminated)
			pcs_readdata_7     => "0000000000000000",                         --     (terminated)
			pcs_read_7         => open,                                       --     (terminated)
			pcs_writedata_7    => open,                                       --     (terminated)
			pcs_write_7        => open,                                       --     (terminated)
			pcs_waitrequest_7  => '0',                                        --     (terminated)
			mac_address_8      => open,                                       --     (terminated)
			mac_readdata_8     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_8         => open,                                       --     (terminated)
			mac_writedata_8    => open,                                       --     (terminated)
			mac_write_8        => open,                                       --     (terminated)
			mac_waitrequest_8  => '0',                                        --     (terminated)
			pcs_address_8      => open,                                       --     (terminated)
			pcs_readdata_8     => "0000000000000000",                         --     (terminated)
			pcs_read_8         => open,                                       --     (terminated)
			pcs_writedata_8    => open,                                       --     (terminated)
			pcs_write_8        => open,                                       --     (terminated)
			pcs_waitrequest_8  => '0',                                        --     (terminated)
			mac_address_9      => open,                                       --     (terminated)
			mac_readdata_9     => "00000000000000000000000000000000",         --     (terminated)
			mac_read_9         => open,                                       --     (terminated)
			mac_writedata_9    => open,                                       --     (terminated)
			mac_write_9        => open,                                       --     (terminated)
			mac_waitrequest_9  => '0',                                        --     (terminated)
			pcs_address_9      => open,                                       --     (terminated)
			pcs_readdata_9     => "0000000000000000",                         --     (terminated)
			pcs_read_9         => open,                                       --     (terminated)
			pcs_writedata_9    => open,                                       --     (terminated)
			pcs_write_9        => open,                                       --     (terminated)
			pcs_waitrequest_9  => '0',                                        --     (terminated)
			mac_address_10     => open,                                       --     (terminated)
			mac_readdata_10    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_10        => open,                                       --     (terminated)
			mac_writedata_10   => open,                                       --     (terminated)
			mac_write_10       => open,                                       --     (terminated)
			mac_waitrequest_10 => '0',                                        --     (terminated)
			pcs_address_10     => open,                                       --     (terminated)
			pcs_readdata_10    => "0000000000000000",                         --     (terminated)
			pcs_read_10        => open,                                       --     (terminated)
			pcs_writedata_10   => open,                                       --     (terminated)
			pcs_write_10       => open,                                       --     (terminated)
			pcs_waitrequest_10 => '0',                                        --     (terminated)
			mac_address_11     => open,                                       --     (terminated)
			mac_readdata_11    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_11        => open,                                       --     (terminated)
			mac_writedata_11   => open,                                       --     (terminated)
			mac_write_11       => open,                                       --     (terminated)
			mac_waitrequest_11 => '0',                                        --     (terminated)
			pcs_address_11     => open,                                       --     (terminated)
			pcs_readdata_11    => "0000000000000000",                         --     (terminated)
			pcs_read_11        => open,                                       --     (terminated)
			pcs_writedata_11   => open,                                       --     (terminated)
			pcs_write_11       => open,                                       --     (terminated)
			pcs_waitrequest_11 => '0',                                        --     (terminated)
			mac_address_12     => open,                                       --     (terminated)
			mac_readdata_12    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_12        => open,                                       --     (terminated)
			mac_writedata_12   => open,                                       --     (terminated)
			mac_write_12       => open,                                       --     (terminated)
			mac_waitrequest_12 => '0',                                        --     (terminated)
			pcs_address_12     => open,                                       --     (terminated)
			pcs_readdata_12    => "0000000000000000",                         --     (terminated)
			pcs_read_12        => open,                                       --     (terminated)
			pcs_writedata_12   => open,                                       --     (terminated)
			pcs_write_12       => open,                                       --     (terminated)
			pcs_waitrequest_12 => '0',                                        --     (terminated)
			mac_address_13     => open,                                       --     (terminated)
			mac_readdata_13    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_13        => open,                                       --     (terminated)
			mac_writedata_13   => open,                                       --     (terminated)
			mac_write_13       => open,                                       --     (terminated)
			mac_waitrequest_13 => '0',                                        --     (terminated)
			pcs_address_13     => open,                                       --     (terminated)
			pcs_readdata_13    => "0000000000000000",                         --     (terminated)
			pcs_read_13        => open,                                       --     (terminated)
			pcs_writedata_13   => open,                                       --     (terminated)
			pcs_write_13       => open,                                       --     (terminated)
			pcs_waitrequest_13 => '0',                                        --     (terminated)
			mac_address_14     => open,                                       --     (terminated)
			mac_readdata_14    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_14        => open,                                       --     (terminated)
			mac_writedata_14   => open,                                       --     (terminated)
			mac_write_14       => open,                                       --     (terminated)
			mac_waitrequest_14 => '0',                                        --     (terminated)
			pcs_address_14     => open,                                       --     (terminated)
			pcs_readdata_14    => "0000000000000000",                         --     (terminated)
			pcs_read_14        => open,                                       --     (terminated)
			pcs_writedata_14   => open,                                       --     (terminated)
			pcs_write_14       => open,                                       --     (terminated)
			pcs_waitrequest_14 => '0',                                        --     (terminated)
			mac_address_15     => open,                                       --     (terminated)
			mac_readdata_15    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_15        => open,                                       --     (terminated)
			mac_writedata_15   => open,                                       --     (terminated)
			mac_write_15       => open,                                       --     (terminated)
			mac_waitrequest_15 => '0',                                        --     (terminated)
			pcs_address_15     => open,                                       --     (terminated)
			pcs_readdata_15    => "0000000000000000",                         --     (terminated)
			pcs_read_15        => open,                                       --     (terminated)
			pcs_writedata_15   => open,                                       --     (terminated)
			pcs_write_15       => open,                                       --     (terminated)
			pcs_waitrequest_15 => '0',                                        --     (terminated)
			mac_address_16     => open,                                       --     (terminated)
			mac_readdata_16    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_16        => open,                                       --     (terminated)
			mac_writedata_16   => open,                                       --     (terminated)
			mac_write_16       => open,                                       --     (terminated)
			mac_waitrequest_16 => '0',                                        --     (terminated)
			pcs_address_16     => open,                                       --     (terminated)
			pcs_readdata_16    => "0000000000000000",                         --     (terminated)
			pcs_read_16        => open,                                       --     (terminated)
			pcs_writedata_16   => open,                                       --     (terminated)
			pcs_write_16       => open,                                       --     (terminated)
			pcs_waitrequest_16 => '0',                                        --     (terminated)
			mac_address_17     => open,                                       --     (terminated)
			mac_readdata_17    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_17        => open,                                       --     (terminated)
			mac_writedata_17   => open,                                       --     (terminated)
			mac_write_17       => open,                                       --     (terminated)
			mac_waitrequest_17 => '0',                                        --     (terminated)
			pcs_address_17     => open,                                       --     (terminated)
			pcs_readdata_17    => "0000000000000000",                         --     (terminated)
			pcs_read_17        => open,                                       --     (terminated)
			pcs_writedata_17   => open,                                       --     (terminated)
			pcs_write_17       => open,                                       --     (terminated)
			pcs_waitrequest_17 => '0',                                        --     (terminated)
			mac_address_18     => open,                                       --     (terminated)
			mac_readdata_18    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_18        => open,                                       --     (terminated)
			mac_writedata_18   => open,                                       --     (terminated)
			mac_write_18       => open,                                       --     (terminated)
			mac_waitrequest_18 => '0',                                        --     (terminated)
			pcs_address_18     => open,                                       --     (terminated)
			pcs_readdata_18    => "0000000000000000",                         --     (terminated)
			pcs_read_18        => open,                                       --     (terminated)
			pcs_writedata_18   => open,                                       --     (terminated)
			pcs_write_18       => open,                                       --     (terminated)
			pcs_waitrequest_18 => '0',                                        --     (terminated)
			mac_address_19     => open,                                       --     (terminated)
			mac_readdata_19    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_19        => open,                                       --     (terminated)
			mac_writedata_19   => open,                                       --     (terminated)
			mac_write_19       => open,                                       --     (terminated)
			mac_waitrequest_19 => '0',                                        --     (terminated)
			pcs_address_19     => open,                                       --     (terminated)
			pcs_readdata_19    => "0000000000000000",                         --     (terminated)
			pcs_read_19        => open,                                       --     (terminated)
			pcs_writedata_19   => open,                                       --     (terminated)
			pcs_write_19       => open,                                       --     (terminated)
			pcs_waitrequest_19 => '0',                                        --     (terminated)
			mac_address_20     => open,                                       --     (terminated)
			mac_readdata_20    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_20        => open,                                       --     (terminated)
			mac_writedata_20   => open,                                       --     (terminated)
			mac_write_20       => open,                                       --     (terminated)
			mac_waitrequest_20 => '0',                                        --     (terminated)
			pcs_address_20     => open,                                       --     (terminated)
			pcs_readdata_20    => "0000000000000000",                         --     (terminated)
			pcs_read_20        => open,                                       --     (terminated)
			pcs_writedata_20   => open,                                       --     (terminated)
			pcs_write_20       => open,                                       --     (terminated)
			pcs_waitrequest_20 => '0',                                        --     (terminated)
			mac_address_21     => open,                                       --     (terminated)
			mac_readdata_21    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_21        => open,                                       --     (terminated)
			mac_writedata_21   => open,                                       --     (terminated)
			mac_write_21       => open,                                       --     (terminated)
			mac_waitrequest_21 => '0',                                        --     (terminated)
			pcs_address_21     => open,                                       --     (terminated)
			pcs_readdata_21    => "0000000000000000",                         --     (terminated)
			pcs_read_21        => open,                                       --     (terminated)
			pcs_writedata_21   => open,                                       --     (terminated)
			pcs_write_21       => open,                                       --     (terminated)
			pcs_waitrequest_21 => '0',                                        --     (terminated)
			mac_address_22     => open,                                       --     (terminated)
			mac_readdata_22    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_22        => open,                                       --     (terminated)
			mac_writedata_22   => open,                                       --     (terminated)
			mac_write_22       => open,                                       --     (terminated)
			mac_waitrequest_22 => '0',                                        --     (terminated)
			pcs_address_22     => open,                                       --     (terminated)
			pcs_readdata_22    => "0000000000000000",                         --     (terminated)
			pcs_read_22        => open,                                       --     (terminated)
			pcs_writedata_22   => open,                                       --     (terminated)
			pcs_write_22       => open,                                       --     (terminated)
			pcs_waitrequest_22 => '0',                                        --     (terminated)
			mac_address_23     => open,                                       --     (terminated)
			mac_readdata_23    => "00000000000000000000000000000000",         --     (terminated)
			mac_read_23        => open,                                       --     (terminated)
			mac_writedata_23   => open,                                       --     (terminated)
			mac_write_23       => open,                                       --     (terminated)
			mac_waitrequest_23 => '0',                                        --     (terminated)
			pcs_address_23     => open,                                       --     (terminated)
			pcs_readdata_23    => "0000000000000000",                         --     (terminated)
			pcs_read_23        => open,                                       --     (terminated)
			pcs_writedata_23   => open,                                       --     (terminated)
			pcs_write_23       => open,                                       --     (terminated)
			pcs_waitrequest_23 => '0'                                         --     (terminated)
		);

	i_tse_pcs_0 : component altera_eth_tse_pcs_pma_gxb
		generic map (
			DEV_VERSION        => 4097,
			DEVICE_FAMILY      => "CYCLONEIVGX",
			SYNCHRONIZER_DEPTH => 3,
			ENABLE_CLK_SHARING => false,
			ENABLE_SGMII       => false,
			PHY_IDENTIFIER     => 0
		)
		port map (
			gxb_pwrdn_in_to_pcs          => i_altgxb_0_gxb_pwrdn_in_to_pcs_export,           --           gxb_pwrdn_in_to_pcs.export
			rx_pcs_clk                   => i_altgxb_0_rx_pcs_clk_export,                    --                    rx_pcs_clk.export
			sd_loopback                  => i_tse_pcs_0_sd_loopback_export,                  --                   sd_loopback.export
			rx_freqlocked                => i_altgxb_0_rx_freqlocked_export,                 --                 rx_freqlocked.export
			rx_disp_err                  => i_altgxb_0_rx_disp_err_export,                   --                   rx_disp_err.export
			rx_runningdisp               => i_altgxb_0_rx_runningdisp_export,                --                rx_runningdisp.export
			tx_pcs_clk                   => i_altgxb_0_tx_pcs_clk_export,                    --                    tx_pcs_clk.export
			rx_digitalreset_sqcnr_rx_clk => i_tse_pcs_0_rx_digitalreset_sqcnr_rx_clk_export, --  rx_digitalreset_sqcnr_rx_clk.export
			rx_analogreset_sqcnr         => i_tse_pcs_0_rx_analogreset_sqcnr_export,         --          rx_analogreset_sqcnr.export
			rx_frame                     => i_altgxb_0_rx_frame_export,                      --                      rx_frame.export
			rx_rmfifodatadeleted         => i_altgxb_0_rx_rmfifodatadeleted_export,          --          rx_rmfifodatadeleted.export
			rx_runlengthviolation        => i_altgxb_0_rx_runlengthviolation_export,         --         rx_runlengthviolation.export
			rx_char_err_gx               => i_altgxb_0_rx_char_err_gx_export,                --                rx_char_err_gx.export
			tx_frame                     => i_tse_pcs_0_tx_frame_export,                     --                      tx_frame.export
			tx_digitalreset_sqcnr_tx_clk => i_tse_pcs_0_tx_digitalreset_sqcnr_tx_clk_export, --  tx_digitalreset_sqcnr_tx_clk.export
			pcs_pwrdn_out_from_pcs       => i_tse_pcs_0_pcs_pwrdn_out_from_pcs_export,       --        pcs_pwrdn_out_from_pcs.export
			rx_patterndetect             => i_altgxb_0_rx_patterndetect_export,              --              rx_patterndetect.export
			pll_locked                   => i_altgxb_0_pll_locked_export,                    --                    pll_locked.export
			rx_syncstatus                => i_altgxb_0_rx_syncstatus_export,                 --                 rx_syncstatus.export
			rx_kchar                     => i_altgxb_0_rx_kchar_export,                      --                      rx_kchar.export
			rx_rmfifodatainserted        => i_altgxb_0_rx_rmfifodatainserted_export,         --         rx_rmfifodatainserted.export
			tx_kchar                     => i_tse_pcs_0_tx_kchar_export,                     --                      tx_kchar.export
			reconfig_busy_to_pcs         => i_altgxb_0_reconfig_busy_to_pcs_export,          --          reconfig_busy_to_pcs.export
			clk                          => clk,                                             -- control_port_clock_connection.clk
			reset                        => reset,                                           --              reset_connection.reset
			reg_addr                     => avalon_arbiter_av_pcs_master_0_address,          --                  control_port.address
			reg_data_out                 => avalon_arbiter_av_pcs_master_0_readdata,         --                              .readdata
			reg_rd                       => avalon_arbiter_av_pcs_master_0_read,             --                              .read
			reg_data_in                  => avalon_arbiter_av_pcs_master_0_writedata,        --                              .writedata
			reg_wr                       => avalon_arbiter_av_pcs_master_0_write,            --                              .write
			reg_busy                     => avalon_arbiter_av_pcs_master_0_waitrequest,      --                              .waitrequest
			ref_clk                      => ref_clk,                                         --  pcs_ref_clk_clock_connection.clk
			tx_clkena                    => i_tse_pcs_0_clock_enable_connection_tx_clkena,   --       clock_enable_connection.tx_clkena
			rx_clkena                    => i_tse_pcs_0_clock_enable_connection_rx_clkena,   --                              .rx_clkena
			gmii_rx_dv                   => i_tse_pcs_0_gmii_connection_gmii_rx_dv,          --               gmii_connection.gmii_rx_dv
			gmii_rx_d                    => i_tse_pcs_0_gmii_connection_gmii_rx_d,           --                              .gmii_rx_d
			gmii_rx_err                  => i_tse_pcs_0_gmii_connection_gmii_rx_err,         --                              .gmii_rx_err
			gmii_tx_en                   => i_tse_mac_mac_gmii_connection_gmii_tx_en,        --                              .gmii_tx_en
			gmii_tx_d                    => i_tse_mac_mac_gmii_connection_gmii_tx_d,         --                              .gmii_tx_d
			gmii_tx_err                  => i_tse_mac_mac_gmii_connection_gmii_tx_err,       --                              .gmii_tx_err
			mii_rx_dv                    => i_tse_pcs_0_mii_connection_mii_rx_dv,            --                mii_connection.mii_rx_dv
			mii_rx_d                     => i_tse_pcs_0_mii_connection_mii_rx_d,             --                              .mii_rx_d
			mii_rx_err                   => i_tse_pcs_0_mii_connection_mii_rx_err,           --                              .mii_rx_err
			mii_tx_en                    => i_tse_mac_mac_mii_connection_mii_tx_en,          --                              .mii_tx_en
			mii_tx_d                     => i_tse_mac_mac_mii_connection_mii_tx_d,           --                              .mii_tx_d
			mii_tx_err                   => i_tse_mac_mac_mii_connection_mii_tx_err,         --                              .mii_tx_err
			mii_col                      => i_tse_pcs_0_mii_connection_mii_col,              --                              .mii_col
			mii_crs                      => i_tse_pcs_0_mii_connection_mii_crs,              --                              .mii_crs
			set_10                       => i_tse_pcs_0_sgmii_status_connection_set_10,      --       sgmii_status_connection.set_10
			set_1000                     => i_tse_pcs_0_sgmii_status_connection_set_1000,    --                              .set_1000
			tx_clk                       => i_tse_pcs_0_pcs_transmit_clock_connection_clk,   -- pcs_transmit_clock_connection.clk
			rx_clk                       => i_tse_pcs_0_pcs_receive_clock_connection_clk,    --  pcs_receive_clock_connection.clk
			reset_tx_clk                 => rst_controller_reset_out_reset,                  -- pcs_transmit_reset_connection.reset
			reset_rx_clk                 => rst_controller_001_reset_out_reset,              --  pcs_receive_reset_connection.reset
			led_crs                      => led_crs,                                         --         status_led_connection.export
			led_link                     => led_link,                                        --                              .export
			led_panel_link               => led_panel_link,                                  --                              .export
			led_col                      => led_col,                                         --                              .export
			led_an                       => led_an,                                          --                              .export
			led_char_err                 => led_char_err,                                    --                              .export
			led_disp_err                 => led_disp_err,                                    --                              .export
			set_100                      => open,                                            --                   (terminated)
			hd_ena                       => open                                             --                   (terminated)
		);

	i_altgxb_0 : component altera_eth_tse_altgxb_0001
		port map (
			rx_digitalreset_sqcnr_rx_clk => i_tse_pcs_0_rx_digitalreset_sqcnr_rx_clk_export, -- rx_digitalreset_sqcnr_rx_clk.export
			rx_syncstatus                => i_altgxb_0_rx_syncstatus_export,                 --                rx_syncstatus.export
			rx_runlengthviolation        => i_altgxb_0_rx_runlengthviolation_export,         --        rx_runlengthviolation.export
			rx_char_err_gx               => i_altgxb_0_rx_char_err_gx_export,                --               rx_char_err_gx.export
			rx_freqlocked                => i_altgxb_0_rx_freqlocked_export,                 --                rx_freqlocked.export
			tx_frame                     => i_tse_pcs_0_tx_frame_export,                     --                     tx_frame.export
			rx_frame                     => i_altgxb_0_rx_frame_export,                      --                     rx_frame.export
			tx_pcs_clk                   => i_altgxb_0_tx_pcs_clk_export,                    --                   tx_pcs_clk.export
			pcs_pwrdn_out_from_pcs       => i_tse_pcs_0_pcs_pwrdn_out_from_pcs_export,       --       pcs_pwrdn_out_from_pcs.export
			pll_locked                   => i_altgxb_0_pll_locked_export,                    --                   pll_locked.export
			rx_analogreset_sqcnr         => i_tse_pcs_0_rx_analogreset_sqcnr_export,         --         rx_analogreset_sqcnr.export
			rx_pcs_clk                   => i_altgxb_0_rx_pcs_clk_export,                    --                   rx_pcs_clk.export
			gxb_pwrdn_in_to_pcs          => i_altgxb_0_gxb_pwrdn_in_to_pcs_export,           --          gxb_pwrdn_in_to_pcs.export
			rx_rmfifodatainserted        => i_altgxb_0_rx_rmfifodatainserted_export,         --        rx_rmfifodatainserted.export
			tx_kchar                     => i_tse_pcs_0_tx_kchar_export,                     --                     tx_kchar.export
			rx_kchar                     => i_altgxb_0_rx_kchar_export,                      --                     rx_kchar.export
			rx_patterndetect             => i_altgxb_0_rx_patterndetect_export,              --             rx_patterndetect.export
			reconfig_busy_to_pcs         => i_altgxb_0_reconfig_busy_to_pcs_export,          --         reconfig_busy_to_pcs.export
			sd_loopback                  => i_tse_pcs_0_sd_loopback_export,                  --                  sd_loopback.export
			tx_digitalreset_sqcnr_tx_clk => i_tse_pcs_0_tx_digitalreset_sqcnr_tx_clk_export, -- tx_digitalreset_sqcnr_tx_clk.export
			rx_disp_err                  => i_altgxb_0_rx_disp_err_export,                   --                  rx_disp_err.export
			rx_runningdisp               => i_altgxb_0_rx_runningdisp_export,                --               rx_runningdisp.export
			rx_rmfifodatadeleted         => i_altgxb_0_rx_rmfifodatadeleted_export,          --         rx_rmfifodatadeleted.export
			ref_clk                      => ref_clk,                                         -- pcs_ref_clk_clock_connection.clk
			rx_recovclkout               => rx_recovclkout,                                  --    serdes_control_connection.export
			reconfig_clk                 => reconfig_clk,                                    --                             .export
			reconfig_togxb               => reconfig_togxb,                                  --                             .export
			reconfig_fromgxb             => reconfig_fromgxb,                                --                             .export
			reconfig_busy                => reconfig_busy,                                   --                             .export
			txp                          => txp,                                             --            serial_connection.export
			rxp                          => rxp,                                             --                             .export
			gxb_cal_blk_clk              => gxb_cal_blk_clk                                  --                  cal_blk_clk.clk
		);

	rst_controller : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset,                                         -- reset_in0.reset
			clk            => i_tse_pcs_0_pcs_transmit_clock_connection_clk, --       clk.clk
			reset_out      => rst_controller_reset_out_reset,                -- reset_out.reset
			reset_req      => open,                                          -- (terminated)
			reset_req_in0  => '0',                                           -- (terminated)
			reset_in1      => '0',                                           -- (terminated)
			reset_req_in1  => '0',                                           -- (terminated)
			reset_in2      => '0',                                           -- (terminated)
			reset_req_in2  => '0',                                           -- (terminated)
			reset_in3      => '0',                                           -- (terminated)
			reset_req_in3  => '0',                                           -- (terminated)
			reset_in4      => '0',                                           -- (terminated)
			reset_req_in4  => '0',                                           -- (terminated)
			reset_in5      => '0',                                           -- (terminated)
			reset_req_in5  => '0',                                           -- (terminated)
			reset_in6      => '0',                                           -- (terminated)
			reset_req_in6  => '0',                                           -- (terminated)
			reset_in7      => '0',                                           -- (terminated)
			reset_req_in7  => '0',                                           -- (terminated)
			reset_in8      => '0',                                           -- (terminated)
			reset_req_in8  => '0',                                           -- (terminated)
			reset_in9      => '0',                                           -- (terminated)
			reset_req_in9  => '0',                                           -- (terminated)
			reset_in10     => '0',                                           -- (terminated)
			reset_req_in10 => '0',                                           -- (terminated)
			reset_in11     => '0',                                           -- (terminated)
			reset_req_in11 => '0',                                           -- (terminated)
			reset_in12     => '0',                                           -- (terminated)
			reset_req_in12 => '0',                                           -- (terminated)
			reset_in13     => '0',                                           -- (terminated)
			reset_req_in13 => '0',                                           -- (terminated)
			reset_in14     => '0',                                           -- (terminated)
			reset_req_in14 => '0',                                           -- (terminated)
			reset_in15     => '0',                                           -- (terminated)
			reset_req_in15 => '0'                                            -- (terminated)
		);

	rst_controller_001 : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset,                                        -- reset_in0.reset
			clk            => i_tse_pcs_0_pcs_receive_clock_connection_clk, --       clk.clk
			reset_out      => rst_controller_001_reset_out_reset,           -- reset_out.reset
			reset_req      => open,                                         -- (terminated)
			reset_req_in0  => '0',                                          -- (terminated)
			reset_in1      => '0',                                          -- (terminated)
			reset_req_in1  => '0',                                          -- (terminated)
			reset_in2      => '0',                                          -- (terminated)
			reset_req_in2  => '0',                                          -- (terminated)
			reset_in3      => '0',                                          -- (terminated)
			reset_req_in3  => '0',                                          -- (terminated)
			reset_in4      => '0',                                          -- (terminated)
			reset_req_in4  => '0',                                          -- (terminated)
			reset_in5      => '0',                                          -- (terminated)
			reset_req_in5  => '0',                                          -- (terminated)
			reset_in6      => '0',                                          -- (terminated)
			reset_req_in6  => '0',                                          -- (terminated)
			reset_in7      => '0',                                          -- (terminated)
			reset_req_in7  => '0',                                          -- (terminated)
			reset_in8      => '0',                                          -- (terminated)
			reset_req_in8  => '0',                                          -- (terminated)
			reset_in9      => '0',                                          -- (terminated)
			reset_req_in9  => '0',                                          -- (terminated)
			reset_in10     => '0',                                          -- (terminated)
			reset_req_in10 => '0',                                          -- (terminated)
			reset_in11     => '0',                                          -- (terminated)
			reset_req_in11 => '0',                                          -- (terminated)
			reset_in12     => '0',                                          -- (terminated)
			reset_req_in12 => '0',                                          -- (terminated)
			reset_in13     => '0',                                          -- (terminated)
			reset_req_in13 => '0',                                          -- (terminated)
			reset_in14     => '0',                                          -- (terminated)
			reset_req_in14 => '0',                                          -- (terminated)
			reset_in15     => '0',                                          -- (terminated)
			reset_req_in15 => '0'                                           -- (terminated)
		);

end architecture rtl; -- of TSE_MAC_v16
